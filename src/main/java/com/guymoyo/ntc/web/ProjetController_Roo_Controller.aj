// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.ntc.web;

import com.guymoyo.ntc.domain.Entreprise;
import com.guymoyo.ntc.domain.Projet;
import com.guymoyo.ntc.domain.Site;
import com.guymoyo.ntc.domain.TypeProjet;
import com.guymoyo.ntc.domain.UserAccount;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ProjetController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String ProjetController.create(@Valid Projet projet, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("projet", projet);
            addDateTimeFormatPatterns(uiModel);
            return "projets/create";
        }
        uiModel.asMap().clear();
        projet.persist();
        return "redirect:/projets/" + encodeUrlPathSegment(projet.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ProjetController.createForm(Model uiModel) {
        uiModel.addAttribute("projet", new Projet());
        addDateTimeFormatPatterns(uiModel);
        return "projets/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ProjetController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("projet", Projet.findProjet(id));
        uiModel.addAttribute("itemId", id);
        return "projets/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ProjetController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("projets", Projet.findProjetEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Projet.countProjets() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("projets", Projet.findAllProjets());
        }
        addDateTimeFormatPatterns(uiModel);
        return "projets/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ProjetController.update(@Valid Projet projet, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("projet", projet);
            addDateTimeFormatPatterns(uiModel);
            return "projets/update";
        }
        uiModel.asMap().clear();
        projet.merge();
        return "redirect:/projets/" + encodeUrlPathSegment(projet.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ProjetController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("projet", Projet.findProjet(id));
        addDateTimeFormatPatterns(uiModel);
        return "projets/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ProjetController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Projet.findProjet(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/projets";
    }
    
    @ModelAttribute("entreprises")
    public Collection<Entreprise> ProjetController.populateEntreprises() {
        return Entreprise.findAllEntreprises();
    }
    
    @ModelAttribute("projets")
    public Collection<Projet> ProjetController.populateProjets() {
        return Projet.findAllProjets();
    }
    
    @ModelAttribute("sites")
    public Collection<Site> ProjetController.populateSites() {
        return Site.findAllSites();
    }
    
    @ModelAttribute("typeprojets")
    public Collection<TypeProjet> ProjetController.populateTypeProjets() {
        return Arrays.asList(TypeProjet.class.getEnumConstants());
    }
    
    @ModelAttribute("useraccounts")
    public Collection<UserAccount> ProjetController.populateUserAccounts() {
        return UserAccount.findAllUserAccounts();
    }
    
    void ProjetController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("projet_datedebut_date_format", "dd-MM-yyyy hh:mm:ss");
        uiModel.addAttribute("projet_datefin_date_format", "dd-MM-yyyy hh:mm:ss");
        uiModel.addAttribute("projet_createdat_date_format", "dd-MM-yyyy hh:mm:ss");
    }
    
    String ProjetController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
