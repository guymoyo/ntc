// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.guymoyo.ntc.domain;

import com.guymoyo.ntc.domain.Arrondissement;
import com.guymoyo.ntc.domain.Departement;
import com.guymoyo.ntc.domain.Pays;
import com.guymoyo.ntc.domain.Region;
import com.guymoyo.ntc.domain.Site;
import com.guymoyo.ntc.domain.UserAccount;
import com.guymoyo.ntc.domain.UserAccountDataOnDemand;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SiteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SiteDataOnDemand: @Component;
    
    private Random SiteDataOnDemand.rnd = new SecureRandom();
    
    private List<Site> SiteDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand SiteDataOnDemand.userAccountDataOnDemand;
    
    public Site SiteDataOnDemand.getNewTransientSite(int index) {
        Site obj = new Site();
        setArrondissement(obj, index);
        setCreatedAt(obj, index);
        setCreatedBy(obj, index);
        setDepartement(obj, index);
        setEnvBiologique(obj, index);
        setEnvGeophysique(obj, index);
        setEnvSocioEconomiqueEtHumain(obj, index);
        setLocalite(obj, index);
        setPays(obj, index);
        setRegion(obj, index);
        setSensibiliteMilieu(obj, index);
        return obj;
    }
    
    public void SiteDataOnDemand.setArrondissement(Site obj, int index) {
        Arrondissement arrondissement = null;
        obj.setArrondissement(arrondissement);
    }
    
    public void SiteDataOnDemand.setCreatedAt(Site obj, int index) {
        Date createdAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedAt(createdAt);
    }
    
    public void SiteDataOnDemand.setCreatedBy(Site obj, int index) {
        UserAccount createdBy = userAccountDataOnDemand.getRandomUserAccount();
        obj.setCreatedBy(createdBy);
    }
    
    public void SiteDataOnDemand.setDepartement(Site obj, int index) {
        Departement departement = null;
        obj.setDepartement(departement);
    }
    
    public void SiteDataOnDemand.setEnvBiologique(Site obj, int index) {
        String envBiologique = "envBiologique_" + index;
        if (envBiologique.length() > 255) {
            envBiologique = envBiologique.substring(0, 255);
        }
        obj.setEnvBiologique(envBiologique);
    }
    
    public void SiteDataOnDemand.setEnvGeophysique(Site obj, int index) {
        String envGeophysique = "envGeophysique_" + index;
        if (envGeophysique.length() > 255) {
            envGeophysique = envGeophysique.substring(0, 255);
        }
        obj.setEnvGeophysique(envGeophysique);
    }
    
    public void SiteDataOnDemand.setEnvSocioEconomiqueEtHumain(Site obj, int index) {
        String envSocioEconomiqueEtHumain = "envSocioEconomiqueEtHumain_" + index;
        if (envSocioEconomiqueEtHumain.length() > 255) {
            envSocioEconomiqueEtHumain = envSocioEconomiqueEtHumain.substring(0, 255);
        }
        obj.setEnvSocioEconomiqueEtHumain(envSocioEconomiqueEtHumain);
    }
    
    public void SiteDataOnDemand.setLocalite(Site obj, int index) {
        String localite = "localite_" + index;
        obj.setLocalite(localite);
    }
    
    public void SiteDataOnDemand.setPays(Site obj, int index) {
        Pays pays = null;
        obj.setPays(pays);
    }
    
    public void SiteDataOnDemand.setRegion(Site obj, int index) {
        Region region = null;
        obj.setRegion(region);
    }
    
    public void SiteDataOnDemand.setSensibiliteMilieu(Site obj, int index) {
        String sensibiliteMilieu = "sensibiliteMilieu_" + index;
        if (sensibiliteMilieu.length() > 255) {
            sensibiliteMilieu = sensibiliteMilieu.substring(0, 255);
        }
        obj.setSensibiliteMilieu(sensibiliteMilieu);
    }
    
    public Site SiteDataOnDemand.getSpecificSite(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Site obj = data.get(index);
        return Site.findSite(obj.getId());
    }
    
    public Site SiteDataOnDemand.getRandomSite() {
        init();
        Site obj = data.get(rnd.nextInt(data.size()));
        return Site.findSite(obj.getId());
    }
    
    public boolean SiteDataOnDemand.modifySite(Site obj) {
        return false;
    }
    
    public void SiteDataOnDemand.init() {
        data = Site.findSiteEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Site' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.guymoyo.ntc.domain.Site>();
        for (int i = 0; i < 10; i++) {
            Site obj = getNewTransientSite(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
